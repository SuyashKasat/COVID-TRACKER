{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setfetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","StyleSheet","image","src","coronaImage","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc56d1e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3j6Y6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__5InQT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2ZyLQ\",\"image\":\"App_image__1aoeO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__13BNk\",\"card\":\"Cards_card__10vqr\",\"infected\":\"Cards_infected__1YanN\",\"recovered\":\"Cards_recovered__ZuDUr\",\"deaths\":\"Cards_deaths__16hZ-\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport Countup from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n  const Cards = ({data: {confirmed,recovered,deaths,lastUpdate}}) => {\r\n      if(!confirmed){\r\n          return 'Loading...';\r\n      }\r\n     return (\r\n         <div className={styles.container}>\r\n             <Grid container spacing={3} justify=\"center\">\r\n                 <Grid item component={Card} xs={12} md={3}className={cx(styles.card,styles.infected)}>\r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                         <Typography variant=\"h5\">\r\n                             <Countup\r\n                              start={0}\r\n                              end={confirmed.value}\r\n                              duration={2.5}\r\n                              separator=\",\"/>\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                         <Typography variant=\"body2\">Number of Active cases of COVID-19</Typography>\r\n                  </CardContent>\r\n                 </Grid>\r\n                 <Grid item component={Card}xs={12} md={3}className={cx(styles.card,styles.recovered)}>\r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                         <Typography variant=\"h5\">\r\n                             <Countup\r\n                              start={0}\r\n                              end={recovered.value}\r\n                              duration={2.5}\r\n                              separator=\",\"/>\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                         <Typography variant=\"body2\">Number of recovered cases from COVID-19</Typography>\r\n                  </CardContent>\r\n                 </Grid>\r\n                 <Grid item component={Card}xs={12} md={3}className={cx(styles.card,styles.deaths)}>\r\n                     <CardContent>\r\n                         <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                         <Typography variant=\"h5\">\r\n                             <Countup\r\n                              start={0}\r\n                              end={deaths.value}\r\n                              duration={2.5}\r\n                              separator=\",\"/>\r\n                         </Typography>\r\n                         <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                         <Typography variant=\"body2\">Number of Deaths from COVID-19</Typography>\r\n                  </CardContent>\r\n                 </Grid>\r\n        \r\n             </Grid>\r\n           \r\n         </div>\r\n     )\r\n }\r\n  export default Cards;","import axios from 'axios';\r\n\r\nconst url='https://covid19.mathdro.id/api';\r\n\r\n export const fetchData = async(country) =>{\r\n     let changeableUrl=url;\r\n\r\n     if(country){\r\n         changeableUrl = `${url}/countries/${country}`\r\n     }\r\ntry{\r\n    const {data:{confirmed,recovered,deaths,lastUpdate}}=await axios.get(changeableUrl);\r\n    return {\r\n        confirmed, recovered,\r\n        deaths,lastUpdate,\r\n    };\r\n}\r\ncatch(error){\r\nconsole.log(error);\r\n}\r\n}\r\n\r\nexport const fetchDailyData= async() =>{\r\n    try{\r\n     const {data}= await axios.get(`${url}/daily`);\r\n     const modifiedData =data.map((dailyData)=>({\r\n      confirmed:dailyData.confirmed.total,\r\n      deaths:dailyData.deaths.total,\r\n      date:dailyData.reportDate,\r\n     }));\r\n     return modifiedData;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n  }\r\n\r\n\r\n  export const fetchCountries=async()=>{\r\n      try{\r\n          const {data:{countries}}=await axios.get(`${url}/countries`);\r\n          return countries.map((country)=>country.name);\r\n      }\r\n      catch(error){\r\n        console.log(error);\r\n      }\r\n  }","import React,{ useState,useEffect } from 'react';\r\n\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport  {fetchDailyData}  from '../../api';\r\nimport styles from './Chart.module.css';\r\n\r\n  const Chart = ({data:{confirmed,recovered,deaths},country}) => {\r\n     const[dailyData ,setDailyData]=useState([]);\r\n\r\n      useEffect(() =>{\r\n          const fetchAPI=async()=>{\r\n              setDailyData(await fetchDailyData());\r\n          }\r\n          console.log(dailyData) ;\r\n          fetchAPI();\r\n      },[]\r\n      );\r\n\r\n      console.log(confirmed,recovered,deaths);\r\n\r\n      const lineChart =(\r\n       dailyData.length\r\n       ? (\r\n           <Line \r\n             data={{\r\n                 labels:dailyData.map(({date})=>date),\r\n                 datasets:[{\r\n                    data:dailyData.map(({confirmed})=>confirmed),\r\n                    label:'Infected',\r\n                    borderColor:'#3333ff',\r\n                    fill:true,\r\n                 },{\r\n                     data:dailyData.map(({deaths})=>deaths),\r\n                 label:'Deaths',\r\n                 borderColor:'red',\r\n                 backgroundColor:'rgba(255,0,0,0.5)',\r\n                 fill:true,\r\n\r\n                 }],\r\n             }}\r\n             />) : null\r\n      );\r\n\r\n      const barChart=(\r\n        confirmed \r\n        ?(\r\n              <Bar\r\n              data={{\r\n                  labels:['Infected','Recovered','Deaths'],\r\n                  datasets:[{\r\n                      label:'People',\r\n                      backgroundColor:['rgba(0,0,255,0.5)',\r\n                        'rgba(0, 255, 0, 0.5)',\r\n                        'rgba(255,0,0,0.5)',],\r\n                   data:[confirmed.value,recovered.value,deaths.value],\r\n                  }]\r\n\r\n              }}\r\n              options={{\r\n                  legend:{display:false},\r\n                  title:{display:true,text:`Current state in ${country}`},\r\n              }}\r\n              />\r\n          ):null\r\n      );\r\n     return (\r\n         <div className={styles.container}>\r\n            {country ? barChart:lineChart}\r\n\r\n            \r\n         </div>\r\n     )\r\n }\r\n  export default Chart;","import React,{useState,useEffect} from 'react';\r\nimport{NativeSelect,FormControl} from '@material-ui/core';\r\nimport {fetchCountries} from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\n  const CountryPicker = ({handleCountryChange}) => {\r\n      const [fetchedCountries,setfetchedCountries]=useState([]);\r\n\r\n      useEffect(()=>{\r\n          const fetchAPI=async()=>{\r\n              setfetchedCountries(await fetchCountries());\r\n          }\r\n          fetchAPI();\r\n      },[setfetchedCountries]);\r\n     // console.log(fetchedCountries);\r\n     return (\r\n         <FormControl className={styles.formControl}>\r\n             <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                 <option value=\"\">Global</option>\r\n                 {fetchedCountries.map((country,i)=> <option key={i} value={country}>{country}</option>)}\r\n             </NativeSelect>\r\n         </FormControl>\r\n             \r\n         \r\n     )\r\n }\r\n  export default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","\r\nimport React from 'react';\r\nimport { Cards,Chart,CountryPicker } from './components';\r\nimport styles from'./App.module.css';\r\nimport{fetchData} from'./api';\r\nimport coronaImage from './images/image.png';\r\nclass App extends React.Component{\r\n  state={\r\n      data:{},\r\n      country:'',\r\n  }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData=await fetchData();\r\n        this.setState({data: fetchedData});\r\n    }\r\n\r\n    handleCountryChange=async(country)=>{\r\n     // console.log(country);\r\n      const fetchedData=await fetchData(country);\r\n    //  console.log(fetchedData);\r\n      this.setState({data:fetchedData,country:country});\r\n    }\r\n  render(){\r\n      const{data,country}=this.state;\r\n    return(\r\n        <div className={styles.container}>\r\n        <img className={StyleSheet.image} src={coronaImage} alt=\"COVID-19\"/>\r\n        <Cards data={data}/>\r\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n        <Chart data={data} country={country}/>\r\n        \r\n        </div>\r\n    )\r\n  } \r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\n\r\nimport App from './App';\r\nReactDom.render(<App/>,document.getElementById('root'));"],"sourceRoot":""}